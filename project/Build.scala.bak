import com.typesafe.sbteclipse.core.EclipsePlugin.EclipseKeys
import spray.revolver.RevolverPlugin.Revolver.reStart
import sbtassembly.Plugin.AssemblyKeys._
import sbtassembly.Plugin._
import spray.revolver.RevolverPlugin.Revolver
import scala.scalajs.sbtplugin.ScalaJSPlugin.ScalaJSKeys._
import scala.scalajs.sbtplugin.ScalaJSPlugin._
import sbt._
import sbt.Keys._

object Build extends sbt.Build {

	// download sources for eclipse
	EclipseKeys.withSource := true
	// don't download javadoc
	transitiveClassifiers in Global := Seq(Artifact.SourceClassifier)

	lazy val commonSettings: Seq[Setting[_]] = Seq(
		version := "1.0",
		scalaVersion := "2.10.4",
		scalacOptions ++= Seq("-unchecked", "-feature", "-Xfuture", "-Xcheckinit"), // , "-Xlint"
		fork := true,
		resolvers += "Sonatype snapshots" at "http://oss.sonatype.org/content/repositories/snapshots",
		offline := true // don't use internet connection for SNAPSHOT updates
	)


	lazy val scalatags = "com.scalatags" % "scalatags_2.10" % "0.2.4-JS"
	lazy val scalarx = "com.scalarx" % "scalarx_2.10" % "0.2.3-JS"
	lazy val scalaJsDom = "org.scala-lang.modules.scalajs" %% "scalajs-dom" % "0.3"
	lazy val h2db = "com.h2database" % "h2" % "[1.3.176,)"
	lazy val logback = "ch.qos.logback" % "logback-classic" % "[1.1.1,)"
	lazy val akka = "com.typesafe.akka" %% "akka-actor" % "2.3.0"
	//	lazy val fobo = "net.liftmodules" %% "fobo_3.0" % "1.2"
	lazy val liftWebkit = "net.liftweb" %% "lift-webkit" % "2.5.1"//"3.0-SNAPSHOT"
	lazy val jetty = "org.eclipse.jetty" % "jetty-webapp" % "9.1.3.v20140225"
	lazy val squeryl = "org.squeryl" %% "squeryl" % "0.9.6-RC2"
	lazy val scalatest = "org.scalatest" %% "scalatest" % "2.1.0" % "test"
	lazy val utest = "com.lihaoyi" % "utest_2.10" % "[0.1.2,)" % "test"
	lazy val scalaJQuery = "org.scala-lang.modules.scalajs" %% "scalajs-jquery" % "0.3"
	//lazy val gitDependency = uri("git://github.com/example/dependency.git#master")


	//	lazy val reactiveClientSettings: Seq[Setting[_]] = {
	//		val libs = libraryDependencies ++= Seq(scalarx, scalatags, scalaJsDom)
	//		commonSettings ++ scalaJSSettings ++ libs
	//	}

	//	def dependencies(d : sbt.ProjectRef*) = Seq(libraryDependencies ++= d.toSeq)

	//  def myProject(id: String, s: Seq[Setting[_]]) =
	//    Project(id, file("./modules/" + id), settings = s)

	//	lazy val reactivePoints = myProject("reactivePoints", reactiveClientSettings)


	//	lazy val reactivePoints = {
	//		val libs = libraryDependencies ++= Seq(scalarx, scalatags, scalaJsDom)
	//		Project("reactivePoints", file("./modules/reactivePoints/")).
	//				settings(scalaJSSettings ++ commonSettings ++ libs: _*)
	//	}

	//	lazy val reactivePoints = project.in(file("./modules/reactivePoints/")).
	//			settings(reactiveClientSettings: _*)

	//  val scalajsOutputDir = Def.settingKey[File]("directory for javascript files output by scalajs")
	//  scalajsOutputDir := file("./src/main/resources")

	//	scalajsOutputDir := (crossTarget in Compile).value / "classes" / "public" / "javascripts"

	//  val setScalajsOutputDir: Seq[Setting[_]] = {
	//    Seq(packageExternalDepsJS, packageInternalDepsJS, packageExportedProductsJS, preoptimizeJS, optimizeJS) map { packageJSKey =>
	//      crossTarget in(Compile, packageJSKey) := file("./src/main/resources")
	//    }
	//  }


	val syncWebapp = {
		resourceGenerators in Compile <+= (resourceManaged, baseDirectory) map { (managedBase, base) =>
			val webappBase = base / "src" / "main" / "webapp"
			val searchPattern = webappBase ** "*"
			val rebaseMapper = rebase(webappBase, managedBase / "main" / "webapp")
			for ((from, to) <- searchPattern pair rebaseMapper) yield {
				//				from.relativeTo()
				Sync.copy(from, to)
				to
			}
		}
	}

	//  lazy val syncOptimizedJS = {
	//    resourceGenerators in Compile <+= (resourceManaged, baseDirectory) map { (managedBase, base) =>
	//      Sync.copy(base / "target" / "scala-2.10" / "reactivepoints-opt.js", base)
	//
	//      val webappBase = base / "src" / "main" / "webapp"
	//      val searchPattern = webappBase ** "*"
	//      val rebaseMapper = rebase(webappBase, managedBase / "main" / "webapp")
	//
	//      for ((from, to) <- searchPattern pair rebaseMapper) yield {
	//        Sync.copy(from, to)
	//        to
	//      }
	//    }
	//  }

	lazy val reactivePoints = project.in(file("./modules/reactivePoints/")).
			settings(
				libraryDependencies ++= Seq(scalarx, scalatags, scalaJsDom)
			).settings(
				commonSettings ++ scalaJSSettings: _*
			)


	val copyJSHack = TaskKey[Unit]("copyJSHack", "Copies JS from scalajs output to resources dir")

	//  def hack(): Unit = println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")

	lazy val server = project.in(file("./modules/server/"))
			.dependsOn(reactivePoints)
			.settings(
				libraryDependencies ++= Seq(scalarx, scalatags, scalaJsDom, h2db, logback, akka, liftWebkit, jetty, squeryl, scalatest),
				//				reStart in Compile <<= (reStart in Compile) dependsOn (optimizeJS in(reactivePoints, Compile)),
				copyJSHack <<= streams map (s => s.log.info("!!!!!!!!!!!!!!!!!!!")),
				copyJSHack <<= copyJSHack dependsOn (optimizeJS in(reactivePoints, Compile)),
				//				reStart <<= InputTask(startArgsParser) (args =>println("!!!!!!!!!!!!!")),
				reStart in Compile <<= (reStart in Compile) dependsOn (copyJSHack in Compile),
				jarName in assembly := "pointsgame.jar",
				assembly <<= assembly dependsOn (test in Test),
				syncWebapp
			).settings(
				Seq(Revolver.settings.settings, assemblySettings, commonSettings).flatten: _* // intellij idea bug
			)

}
